import urllib.parse
import urllib.request
import json
import pandas as pd
import re

def get_predicted_formulas(mass, mfRange, chemcalcURL, ppm_limit=12.5):
    params = {
        'integerUnsaturation': False,
        'massRange': 1,
        'mfRange': mfRange,
        'minUnsaturation': -2,
        'useUnsaturation': True,
        'monoisotopicMass': mass
    }

    data = urllib.parse.urlencode(params).encode('utf-8')
    req = urllib.request.Request(chemcalcURL, data)

    try:
        with urllib.request.urlopen(req) as response:
            result = response.read().decode('utf-8')
            json_result = json.loads(result)
            results = json_result.get('results', [])
            if results:
                predicted_formula = pd.DataFrame(results)
                if set(['mf', 'ppm', 'unsat']).issubset(predicted_formula.columns):
                    predicted_formula = predicted_formula[['mf', 'ppm', 'unsat']]
                    predicted_formula = predicted_formula[predicted_formula['ppm'].abs() < ppm_limit]
                else:
                    print(f"Unexpected server response, missing columns: {predicted_formula.columns}")
                    return pd.DataFrame()
            else:
                print(f"Unexpected server response, missing 'results': {json_result}")
                return pd.DataFrame()
    except urllib.error.URLError as e:
        print('Error:', e)
        return pd.DataFrame()

    elements = [item[0] for item in mfRange.split()]
    for element in elements:
        predicted_formula[element] = predicted_formula['mf'].apply(
            lambda x: int(re.findall(f"{element}(\\d*)", x)[0]) if re.findall(f"{element}(\\d*)", x) and re.findall(f"{element}(\\d*)", x)[0] != '' else 1 if re.findall(f"{element}", x) else 0)

    return predicted_formula

chemcalcURL = 'https://www.chemcalc.org/chemcalc/em'

